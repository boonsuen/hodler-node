<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="fonts/Manrope-Medium.woff2" rel="preload" as="font" type="font/woff2" crossorigin>
    <link href="fonts/Manrope-ExtraBold.woff2" rel="preload" as="font" type="font/woff2" crossorigin>
    <link rel="icon" href="img/logo.svg">
    <link href="css/normalize.css" rel="stylesheet">
    <link href="css/main.css" rel="stylesheet">
    <script>
      (function() {
        if (!location.href.endsWith('/') && location.pathname === '/hodler-serverful') {
          window.location = location.href + '/';
        }
      }())
    </script>
    <title>Hodler Serverful</title>
  </head>
  <body>
    <div class="header">
      <div class="links">
        <a href="https://github.com/boonsuen/hodler-serverful" target="_blank" rel="noopener noreferrer">
          <img src="img/github.svg" alt="GitHub">
        </a>
        <a href="https://twitter.com/_wnxn" target="_blank" rel="noopener noreferrer">
          <img src="img/twitter.svg" alt="Twitter">
        </a>
      </div>
      <img class="logo" src="img/logo.svg" alt="Logo">
      <div class="title">Hodler</div>
    </div>
    <div class="switch">
      {{#if isMainView}}
        <a class="active" href=".">Main</a>
        <a class="not-active" href="./watching">Watching</a>
      {{else}}
        <a class="not-active" href=".">Main</a>
        <a class="active" href="./watching">Watching</a>
      {{/if}}
    </div>
    <table class="price-table">
      <thead>
        <tr class="row-head">
          <th class="name">Name</th>
          <th class="price">Price</th>
          <th class="change">Change</th>
        </tr>
      </thead>
      <tbody>
        {{#each coinsDataToRender}}
          <tr class="tbodyRow">
            <td>{{this.name}} ({{toUpperCase this.symbol}})</td>
            {{evaluateIfBitcoin this.id this.usd this.btc}}
            <td class="pc">{{this.usd_24h_change}}</td>
          </tr>
        {{/each}}
      </tbody>
    </table>
    <script>
    const generatePriceChangeColor = () => {
      const pcElem = document.getElementsByClassName('pc');    
      for (let elem of pcElem) {
        let price = Number(elem.textContent);
        if (price > 0) {
          elem.style.color = '#4ae264';
        } else if (price < 0) {
          elem.style.color = '#ff8282';
        }
      }
    };
    generatePriceChangeColor();

    const tableRows = document.querySelectorAll('.tbodyRow');
    const cellsOfEachRow = [];
    [...tableRows].map(row => {
      cellsOfEachRow.push(row);
    });
    const coins = [];
    cellsOfEachRow.map(tr => {
      const coin = {};
      for (let i = 0; i < tr.children.length; i++) {
        coin[i] = tr.children[i].textContent;
      }
      coins.push(coin);
    });

    const changeTitleEl = document.querySelector('.change');
    const tbodyEl = document.querySelector('tbody');
    const sortByOptions = ['highestFirst', 'lowestFirst', 'default'];
    let lastOption = 'default';
    const generateRowDOM = (coin) => {
      const row = document.createElement('tr');
      const nameCell = document.createElement('td');
      const priceCell = document.createElement('td');
      const changeCell = document.createElement('td');
      changeCell.classList.add('pc');    
      
      nameCell.textContent = `${coin[0]}`;
      priceCell.textContent = `${coin[1]}`;
      changeCell.textContent = `${coin[2]}`;
      
      row.appendChild(nameCell);
      row.appendChild(priceCell);
      row.appendChild(changeCell);

      return row;
    };
    const sortCoinsBy = (option) => {
      tbodyEl.innerHTML = '';
      if (option === 'highestFirst') {
        const coinsClone = [...coins];
        coinsClone.sort((a, b) => {
          return Number(b[2]) - Number(a[2]);
        });
        coinsClone.forEach(coin => {
          tbodyEl.appendChild(generateRowDOM(coin));
        });
        generatePriceChangeColor();
      } else if (option === 'lowestFirst') {
        const coinsClone = [...coins];
        coinsClone.sort((a, b) => {
          return Number(a[2]) - Number(b[2]);
        });
        coinsClone.forEach(coin => {
          tbodyEl.appendChild(generateRowDOM(coin));
        });
        generatePriceChangeColor();
      } else if (option === 'default') {
        coins.forEach(coin => {
          tbodyEl.appendChild(generateRowDOM(coin));
        });
        generatePriceChangeColor();
      }
      lastOption = option;
    };
    changeTitleEl.addEventListener('click', () => {
      if (lastOption === 'default') {
        sortCoinsBy('highestFirst');
      } else if (lastOption === 'highestFirst') {
        sortCoinsBy('lowestFirst');
      } else if (lastOption === 'lowestFirst') {
        sortCoinsBy('default');
      }
    });
    </script>
  </body>
</html>
